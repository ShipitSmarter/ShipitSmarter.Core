using System.ComponentModel.DataAnnotations;
using ShipitSmarter.Core.Exceptions;

namespace ShipitSmarter.Core.Models.v1;

/// <summary>
/// A machine-readable format for specifying errors in HTTP API responses based on <see href="https://tools.ietf.org/html/rfc7807" />.
/// </summary>
[Serializable]
public class CoreProblemDetails
{
    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    /// dereferenced, it provide human-readable documentation for the problem type
    /// (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be
    /// "about:blank".
    /// </summary>
    public string? Type { get; set; }

    /// <summary>
    /// A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence
    /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
    /// see[RFC7231], Section 3.4).
    /// </summary>
    public string? Title { get; set; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    public int? Status { get; set; }

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    public string? Detail { get; set; }

    /// <summary>
    /// A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
    /// </summary>
    public string? Instance { get; set; }

    /// <summary>
    /// A collection of detailed errors that occurred
    /// </summary>
    [Required]
    public List<Error> Errors { get; set; } = new();
    
    /// <summary>
    /// Correlation id of the request
    /// </summary>
    public Guid? CorrelationId { get; set; }
    
    /// <summary>
    /// Turn the problem details into an exception
    /// </summary>
    /// <param name="message">(Optional) new title to give the exception</param>
    /// <returns>A ProblemDetailsException</returns>
    public ProblemDetailsException ToException(string? message = null)
    {
        return new ProblemDetailsException(this, message);
    }
}